import {Injectable, Inject, PLATFORM_ID} from '@angular/core';
import {isPlatformBrowser} from '@angular/common';
import {HttpClient} from '@angular/common/http';
import {Router} from '@angular/router';
import {Observable} from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private baseUrl = 'http://localhost:8080/api/auth';

  constructor(
    private http: HttpClient,
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: object // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã (SSR/Browser)
  ) {
  }

  /** ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–µ */
  private isBrowser(): boolean {
    return isPlatformBrowser(this.platformId);
  }

  /** ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ Cookie (–Ω–µ –≤ localStorage!) */
  saveToken(token: string): void {
    if (this.isBrowser()) {
      document.cookie = `jwt-token=${token}; path=/; Secure; HttpOnly; SameSite=None`;
    } else {
      console.warn('‚ö†Ô∏è Cannot use document.cookie in SSR mode.');
    }
  }

  /** ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ Cookie */
  getToken(): string | null {
    if (this.isBrowser()) {
      const cookie = document.cookie
        .split('; ')
        .find(row => row.startsWith('jwt-token='));
      return cookie ? cookie.split('=')[1] : null;
    } else {
      console.warn('‚ö†Ô∏è Cookies are not available in SSR mode.');
      return null;
    }
  }

  /** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
  isLoggedIn(): boolean {
    const token = this.getToken();
    console.log('üîç AuthService: Checking if user is logged in. Token:', token);
    return !!token;
  }

  /** ‚úÖ –ú–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω withCredentials) */
  register(email: string, password: string): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(
      `${this.baseUrl}/register`,
      {email, password},
      {withCredentials: true} // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∫—É–∫–∏!
    );
  }

  /** ‚úÖ –ú–µ—Ç–æ–¥ –ª–æ–≥–∏–Ω–∞ (–¥–æ–±–∞–≤–ª–µ–Ω withCredentials) */
  login(email: string, password: string): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(
      `${this.baseUrl}/login`,
      {email, password},
      {withCredentials: true} // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∫—É–∫–∏!
    );
  }

  /** ‚úÖ –õ–æ–≥–∞—É—Ç (–æ—á–∏—â–∞–µ–º –∫—É–∫–∏) */
  logout(): void {
    if (this.isBrowser()) {
      console.log('üî¥ AuthService: Logging out user');

      // ‚ùå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è Cookies
      this.http.post('http://localhost:8080/api/auth/logout', {}, { withCredentials: true, responseType: 'text' })
        .subscribe({
          next: (response) => {
            console.log("‚úÖ Server response:", response); // –¢–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞

            // ‚ùå –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.removeItem('authToken');
            document.cookie = "jwt-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; Secure; SameSite=None";

            // üîÑ **–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Angular Router**
            this.router.navigate(['/login']).then(() => {
              window.location.reload(); // üí° –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ UI
            });
          },
          error: (err) => {
            console.error('üö® Logout error:', err);
          }
        });
    }
  }

  /** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω withCredentials) */
  checkAuth()
    :
    Observable<boolean> {
    return this.http.get<boolean>(
      `${this.baseUrl}/check`,
      {withCredentials: true} // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∫—É–∫–∏!
    );
  }
}
