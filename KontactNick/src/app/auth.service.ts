import {Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {Router} from '@angular/router';
import {Observable} from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private baseUrl = 'http://localhost:8080/api/auth'; // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL API

  constructor(private http: HttpClient, private router: Router) {
  }

  /** ‚úÖ –ú–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
  register(email: string, password: string): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${this.baseUrl}/register`, {email, password});
  }

  /** ‚úÖ –ú–µ—Ç–æ–¥ –ª–æ–≥–∏–Ω–∞ */
  login(email: string, password: string): Observable<{ token: string }> {
    return this.http.post<{ token: string }>(`${this.baseUrl}/login`, {email, password});
  }

  /** ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ */
  saveToken(token: string): void {
    console.log('‚úÖ AuthService: Saving token:', token);
    if (token) {
      localStorage.setItem('authToken', token);
    } else {
      console.warn('‚ö†Ô∏è No token received, not saving.');
    }
  }

  /** ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ */
  getToken(): string | null {
    return localStorage.getItem('authToken');
  }

  /** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
  isLoggedIn(): boolean {
    const token = this.getToken();
    console.log('üîç AuthService: Checking if user is logged in. Token:', token);
    return !!token;
  }

  /** ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google –æ—Ç —ç–Ω–¥–ø–æ–π–Ω—Ç–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ */
  getGoogleToken(): Observable<any> {
    console.log('üîç AuthService: Requesting token from backend...');

    const headers = {Authorization: `Bearer ${this.getToken()}`};
    return this.http.get<{ token: string }>('http://localhost:8080/api/auth/token', {headers});
  }

  /** ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ URL */
  private getTokenFromUrl(): string | null {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('token');
  }

  /** ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google */
  handleGoogleLogin(): void {
    console.log('üîÑ AuthService: Handling Google login...');

    this.getGoogleToken().subscribe({
      next: (response) => {
        console.log('‚úÖ AuthService: Google token received:', response.token);
        this.saveToken(response.token);
        this.router.navigate(['/dashboard']); // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω
      },
      error: (err) => {
        console.error('üö® AuthService: Error fetching Google token:', err);
        this.router.navigate(['/login']); // ‚ùå –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ login
      }
    });
  }

  /** ‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL */
  private clearQueryParams(): void {
    window.history.replaceState({}, document.title, window.location.pathname);
  }

  /** ‚úÖ –õ–æ–≥–∞—É—Ç */
  logout(): void {
    console.log('üî¥ AuthService: Logging out user');
    localStorage.removeItem('authToken'); // ‚úÖ –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
    this.router.navigate(['/login']);
  }

  checkAuth(): Observable<boolean> {
    return this.http.get<boolean>('http://localhost:8080/api/auth/check', {withCredentials: true});
  }
}
