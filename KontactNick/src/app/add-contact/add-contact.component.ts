import { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { CategoryService } from '../services/category.service';
import { AuthService } from '../services/auth.service';
import { GoogleContactsService } from '@app/services/google-contacts.service';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatDialogModule } from '@angular/material/dialog';

@Component({
  selector: 'app-add-contact-dialog',
  templateUrl: './add-contact.component.html',
  standalone: true,
  styleUrls: ['./add-contact.component.css'],
  imports: [
    CommonModule,
    FormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatDialogModule
  ]
})
export class AddContactDialogComponent implements OnInit {
  categoryId: number;
  fields: any[] = [];
  contactData: any = { firstName: '', nick: '', email: '', category: '', otherFields: {} };
  currentUserNick: string = '';

  constructor(
    private dialogRef: MatDialogRef<AddContactDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private categoryService: CategoryService,
    private authService: AuthService,
    private googleContactsService: GoogleContactsService
  ) {
    this.categoryId = data.categoryId;
  }

  ngOnInit(): void {
    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.authService.getUserProfile().subscribe(profile => {
      if (profile?.nick) {
        this.currentUserNick = profile.nick;
      }
    });

    // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.loadFields();
  }

  loadFields(): void {
    this.categoryService.getCategoryFields(this.categoryId).subscribe({
      next: (fields) => {
        this.fields = fields;
        console.log("‚úÖ Fields loaded:", fields);
      },
      error: (err: any) => {
        console.error("‚ùå Error loading fields:", err);
      }
    });
  }

  save(): void {
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è name –∏ email
    if (!this.contactData.name?.trim() || !this.contactData.email?.trim()) {
      alert("‚ö†Ô∏è Please enter a valid name and email!");
      return;
    }

    // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç, –Ω—É–∂–Ω—ã–π Google
    const googleContact = {
      name: this.contactData.name,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º name –≤–º–µ—Å—Ç–æ firstName
      nickname: this.contactData.nick || '',  // –ù–∏–∫–Ω–µ–π–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
      email: this.contactData.email,
      phone: this.contactData.—Ç–µ–ª–µ—Ñ–æ–Ω || ''  // –ï—Å–ª–∏ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    };

    // ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–∫–æ–º
    const additionalFields = Object.keys(this.contactData)
      .filter(key => !['name', 'nick', 'email', '—Ç–µ–ª–µ—Ñ–æ–Ω'].includes(key))
      .map(key => ({ field: key, value: this.contactData[key] }));

    console.log("üì§ Saving to Google Contacts:", googleContact);
    console.log("üì• Additional fields:", additionalFields);

    this.dialogRef.close(this.contactData);
    this.saveContactToGoogle(googleContact, additionalFields);
  }

  saveContactToGoogle(contact: any, additionalFields: any[]): void {
    const accessToken = localStorage.getItem("googleAccessToken");
    if (!accessToken) {
      console.error("‚ùå No Google access token found!");
      alert("‚ö†Ô∏è You need to log in with Google first!");
      return;
    }

    this.googleContactsService.addToGoogleContacts(contact, accessToken).subscribe({
      next: (response) => {
        console.log("‚úÖ Contact successfully added to Google Contacts!", response);
        alert("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google!");
      },
      error: (err) => {
        console.error("‚ùå Error adding contact to Google:", err);
        alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Google.");
      }
    });

  }

  close(): void {
    this.dialogRef.close();
  }
}
