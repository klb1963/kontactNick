package kontactNick.service;

import jakarta.annotation.PostConstruct;
import kontactNick.entity.User;
import kontactNick.repository.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Service
public class UserGoogleTokenService {
    private final UserRepository userRepository;
    private final RestTemplate restTemplate;

    @Value("${google.client.id}")
    private String clientId;

    @Value("${google.client.secret}")
    private String clientSecret;

    @Value("${google.redirect.uri}")
    private String redirectUri;

    private static final String TOKEN_URL = "https://oauth2.googleapis.com/token";

    public UserGoogleTokenService(UserRepository userRepository, RestTemplate restTemplate) {
        this.userRepository = userRepository;
        this.restTemplate = restTemplate;
    }

    @PostConstruct
    public void logGoogleConfig() {
        log.info("üîç Google Client ID: {}", clientId);
        log.info("üîç Google Redirect URI: {}", redirectUri);
    }

    /**
     * 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—Ç access_code –∏–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Google.
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ `CustomAuthenticationSuccessHandler`
     */
    public void handleGoogleLogin(User user, String authorizationCode) {
        log.info("üì• –ü–æ–ª—É—á–µ–Ω authorization_code –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", user.getEmail());
        exchangeAuthorizationCodeForTokens(user, authorizationCode);
    }

    /**
     * 2Ô∏è‚É£ –û–±–º–µ–Ω access_code –Ω–∞ access_token + refresh_token
     */
    private void exchangeAuthorizationCodeForTokens(User user, String authorizationCode) {
        log.info("üîÑ –û–±–º–µ–Ω access_code –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–ª—è {}", user.getEmail());

        MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();
        requestParams.add("client_id", clientId);
        requestParams.add("client_secret", clientSecret);
        requestParams.add("code", authorizationCode);
        requestParams.add("grant_type", "authorization_code");
        requestParams.add("redirect_uri", redirectUri);

        ResponseEntity<Map> response = restTemplate.postForEntity(TOKEN_URL, new HttpEntity<>(requestParams), Map.class);

        if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
            String accessToken = (String) response.getBody().get("access_token");
            String refreshToken = (String) response.getBody().get("refresh_token");
            int expiresIn = (Integer) response.getBody().get("expires_in");

            user.setGoogleAccessToken(accessToken);
            user.setGoogleRefreshToken(refreshToken);
            user.setGoogleTokenExpiry(Instant.now().plusSeconds(expiresIn));

            userRepository.save(user);
            log.info("‚úÖ Access & Refresh Tokens —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {}", user.getEmail());
        } else {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç Google: {}", response);
            throw new IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã Google");
        }
    }

    /**
     * 3Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π access_token –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ refresh_token.
     */
    public String getValidAccessToken(User user) {
        if (user.getGoogleAccessToken() == null) {
            log.error("‚ùå –ù–µ—Ç access_token –¥–ª—è {}", user.getEmail());
            throw new IllegalStateException("Access token is missing for user: " + user.getEmail());
        }

        if (user.getGoogleTokenExpiry() == null || Instant.now().isAfter(user.getGoogleTokenExpiry())) {
            log.warn("‚ö†Ô∏è Access token –¥–ª—è {} –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–ª—è–µ–º...", user.getEmail());
            return refreshAccessToken(user);
        }

        return user.getGoogleAccessToken();
    }

    /**
     * 4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ—Ç access_token —Å –ø–æ–º–æ—â—å—é refresh_token
     */
    private String refreshAccessToken(User user) {
        log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token —á–µ—Ä–µ–∑ refresh_token –¥–ª—è {}", user.getEmail());

        if (user.getGoogleRefreshToken() == null) {
            log.error("‚ùå –ù–µ—Ç refresh_token –¥–ª—è {}", user.getEmail());
            throw new IllegalStateException("Refresh token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: " + user.getEmail());
        }

        MultiValueMap<String, String> requestParams = new LinkedMultiValueMap<>();
        requestParams.add("client_id", clientId);
        requestParams.add("client_secret", clientSecret);
        requestParams.add("refresh_token", user.getGoogleRefreshToken());
        requestParams.add("grant_type", "refresh_token");

        ResponseEntity<Map> response = restTemplate.postForEntity(TOKEN_URL, new HttpEntity<>(requestParams), Map.class);

        if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
            String newAccessToken = (String) response.getBody().get("access_token");
            int expiresIn = (Integer) response.getBody().get("expires_in");

            user.setGoogleAccessToken(newAccessToken);
            user.setGoogleTokenExpiry(Instant.now().plusSeconds(expiresIn));
            userRepository.save(user);

            log.info("‚úÖ Access token –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è {}", user.getEmail());
            return newAccessToken;
        } else {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token: {}", response);
            throw new IllegalStateException("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token —á–µ—Ä–µ–∑ refresh_token");
        }
    }
}