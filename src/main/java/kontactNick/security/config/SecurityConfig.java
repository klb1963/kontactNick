package kontactNick.security.config;

import jakarta.servlet.http.HttpServletResponse;
import kontactNick.security.handler.CustomAuthenticationSuccessHandler;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.context.HttpSessionSecurityContextRepository;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.util.List;
import static org.springframework.security.config.Customizer.withDefaults;

@Slf4j
@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final CustomAuthenticationSuccessHandler customAuthenticationSuccessHandler;

    @Bean
    public BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .cors(withDefaults()) // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º CORS
                .csrf(csrf -> csrf.disable()) // ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º CSRF (–Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è API)
                .authorizeHttpRequests(auth -> auth
                        // ‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                        .requestMatchers("/", "/home").permitAll()
                        .requestMatchers("/api/auth/**").permitAll() // ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        .requestMatchers("/api/public/**").permitAll() // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—É –ø—É–±–ª–∏—á–Ω—ã—Ö API
                        .requestMatchers("/api/oauth2/profile").authenticated() // ‚úÖ –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        .requestMatchers("/api/categories/**").hasAuthority("ROLE_USER")
                        .requestMatchers(HttpMethod.PUT, "/api/fields/**").authenticated() // ‚úÖ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
                        .requestMatchers(HttpMethod.DELETE, "/api/categories/**/fields/**").authenticated() // —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
                        .requestMatchers("/api/auth/token").authenticated() // ‚úÖ –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        .anyRequest().authenticated() // ‚úÖ –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                )
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // ‚úÖ Stateless –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (JWT)
                .oauth2Login(oauth2 -> oauth2
                        .successHandler(customAuthenticationSuccessHandler) // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π successHandler
                )
                .logout(logout -> logout
                        .logoutSuccessUrl("/").permitAll() // ‚úÖ –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã—Ö–æ–¥
                )
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class) // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º JWT —Ñ–∏–ª—å—Ç—Ä –ø–µ—Ä–µ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
                .exceptionHandling(exc -> exc
                        .authenticationEntryPoint((request, response, authException) -> {
                            log.warn("‚ùå Unauthorized request to {}", request.getRequestURI());
                            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                            response.setContentType("application/json");
                            response.setHeader("WWW-Authenticate", "Bearer realm=\"Access to API\""); // üî• –î–æ–±–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫
                            response.getWriter().write("{\"error\": \"Unauthorized\"}");
                        })
                );

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://localhost:4200"));
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS")); // ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤
        configuration.setAllowCredentials(true);
        configuration.setAllowedHeaders(List.of("Authorization", "Cache-Control", "Content-Type"));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}