package kontactNick.security.handler;

import kontactNick.entity.Roles;
import kontactNick.entity.User;
import kontactNick.repository.UserRepository;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.transaction.Transactional;
import kontactNick.security.util.JwtTokenProvider;
import kontactNick.service.TokenService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.time.Duration;
import java.util.Optional;

@Slf4j
@Component
@Transactional
public class CustomAuthenticationSuccessHandler implements AuthenticationSuccessHandler {

    private final UserRepository userRepository;
    private final JwtTokenProvider jwtTokenProvider;
    private final TokenService tokenService;

    public CustomAuthenticationSuccessHandler(UserRepository userRepository, JwtTokenProvider jwtTokenProvider, TokenService tokenService) {
        this.userRepository = userRepository;
        this.jwtTokenProvider = jwtTokenProvider;
        this.tokenService = tokenService;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        log.info("‚úÖ OAuth Login Success: {}", authentication.getName());

        if (authentication.getPrincipal() instanceof OidcUser oidcUser) {
            String email = oidcUser.getEmail();
            String fullName = oidcUser.getFullName();
            String avatarUrl = oidcUser.getPicture();

            // ‚ö†Ô∏è –ï—Å–ª–∏ `fullName` –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ `nick`
            String nick = (fullName != null && !fullName.isEmpty()) ? fullName : email;

            log.info("üîç OAuth User Info: email={}, nick={}, avatarUrl={}", email, nick, avatarUrl);

            Optional<User> optionalUser = userRepository.findByEmail(email);

            User user = optionalUser.orElseGet(() -> {
                User newUser = new User();
                newUser.setEmail(email);
                newUser.setNick(nick);
                newUser.setAvatarUrl(avatarUrl);
                newUser.setRole(Roles.ROLE_USER);
                log.info("üÜï New user registered: {}", email);
                return userRepository.save(newUser);
            });

            // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º SecurityContext
            if (!SecurityContextHolder.getContext().getAuthentication().isAuthenticated()) {
                SecurityContextHolder.getContext().setAuthentication(authentication);
                log.info("üîê SecurityContextHolder: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω -> {}", authentication.getName());
            } else {
                log.info("üîê SecurityContextHolder —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é: {}", SecurityContextHolder.getContext().getAuthentication().getName());
            }

            // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
            String jwt = jwtTokenProvider.generateToken(user.getEmail(), user.getRole().name());
            log.info("üîë Generated JWT: {}", jwt);

            if (jwt == null || jwt.isEmpty()) {
                log.error("‚ùå –û—à–∏–±–∫–∞: JWT –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
            } else {
                // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JWT –≤ Cookie
                boolean isSecure = request.isSecure();  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, HTTPS –∏–ª–∏ HTTP

                ResponseCookie accessTokenCookie = ResponseCookie.from("jwt-token", jwt)
                        .httpOnly(true)  // ‚úÖ –ó–∞—â–∏—â–∞–µ–º Cookie –æ—Ç JavaScript
                        .secure(isSecure) // ‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (HTTPS ‚Üí true, HTTP ‚Üí false)
                        .path("/")
                        .maxAge(Duration.ofDays(1))
                        .sameSite(isSecure ? "None" : "Lax")  // ‚ùó –î–ª—è –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–µ–Ω `None`
                        .build();

                response.addHeader(HttpHeaders.SET_COOKIE, accessTokenCookie.toString());
                log.info("üç™ JWT —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Cookie: {}", accessTokenCookie);
            }

            // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
            String redirectUrl = "http://localhost:4200/dashboard";  // ‚úÖ –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ env
            log.info("‚û° –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {}", redirectUrl);
            response.sendRedirect(redirectUrl);
        } else {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ OIDC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
            response.sendRedirect("http://localhost:4200/login?error=authentication_failed");
        }
    }
}