package kontactNick.security.handler;

import jakarta.servlet.http.Cookie;
import kontactNick.entity.Roles;
import kontactNick.entity.User;
import kontactNick.repository.UserRepository;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.transaction.Transactional;
import kontactNick.security.util.JwtTokenProvider;
import kontactNick.service.TokenService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseCookie;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.core.oidc.OidcIdToken;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;
import org.springframework.web.util.WebUtils;

import java.io.IOException;
import java.time.Duration;
import java.time.Instant;
import java.util.Optional;

@Slf4j
@Component
@Transactional
public class CustomAuthenticationSuccessHandler implements AuthenticationSuccessHandler {

    private final UserRepository userRepository;
    private final JwtTokenProvider jwtTokenProvider;
    private final TokenService tokenService;

    public CustomAuthenticationSuccessHandler(UserRepository userRepository, JwtTokenProvider jwtTokenProvider, TokenService tokenService) {
        this.userRepository = userRepository;
        this.jwtTokenProvider = jwtTokenProvider;
        this.tokenService = tokenService;
    }

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException {
        log.info("‚úÖ OAuth Login Success: {}", authentication.getName());

        if (authentication.getPrincipal() instanceof OidcUser oidcUser) {
            String email = oidcUser.getEmail();
            String fullName = oidcUser.getFullName();
            String avatarUrl = oidcUser.getPicture();
            String nick = (fullName != null && !fullName.isEmpty()) ? fullName : email;

            log.info("üîç OAuth User Info: email={}, nick={}, avatarUrl={}", email, nick, avatarUrl);

            Optional<User> optionalUser = userRepository.findByEmail(email);
            User user = optionalUser.orElseGet(() -> {
                User newUser = new User();
                newUser.setEmail(email);
                newUser.setNick(nick);
                newUser.setAvatarUrl(avatarUrl);
                newUser.setRole(Roles.ROLE_USER);
                log.info("üÜï New user registered: {}", email);
                return userRepository.save(newUser);
            });

            // ‚úÖ –ü–æ–ª—É—á–∞–µ–º access_token –∏ refresh_token –∏–∑ OIDC —Ç–æ–∫–µ–Ω–∞
            String googleAccessToken = oidcUser.getIdToken().getTokenValue();
            OidcIdToken idToken = oidcUser.getIdToken();
            String googleRefreshToken = idToken.getClaims().getOrDefault("refresh_token", "").toString();

            // üîç –ü–æ–ª—É—á–∞–µ–º `exp` (–≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞) –∏ –≤—ã—á–∏—Å–ª—è–µ–º `expires_in`
            Instant tokenExpiry = idToken.getExpiresAt();
            long expiresIn = Duration.between(Instant.now(), tokenExpiry).getSeconds();

            log.info("üîç Google OAuth Tokens: accessToken={}, refreshToken={}", googleAccessToken, googleRefreshToken);
            log.info("üîë –ù–æ–≤—ã–π access_token: {}", googleAccessToken);
            log.info("‚è≥ expires_in: {} —Å–µ–∫—É–Ω–¥", expiresIn);
            log.info("üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è (UTC): {}", tokenExpiry);

            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º access_token –∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            user.setGoogleAccessToken(googleAccessToken);
            user.setGoogleTokenExpiry(tokenExpiry);

            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º refresh_token, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (!googleRefreshToken.isEmpty()) {
                user.setGoogleRefreshToken(googleRefreshToken);
            } else {
                log.warn("‚ö†Ô∏è –£ Google –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç refresh_token! –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.");
            }

            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
            userRepository.save(user);
            log.info("‚úÖ Google Access Token —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", user.getEmail());

            // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
            String jwt = jwtTokenProvider.generateToken(user.getEmail(), user.getRole().name());
            log.info("üîë Generated JWT: {}", jwt);

            if (jwt == null || jwt.isEmpty()) {
                log.error("‚ùå –û—à–∏–±–∫–∞: JWT –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!");
            } else {
                // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º JWT –≤ Cookie
                boolean isSecure = request.isSecure();

                ResponseCookie accessTokenCookie = ResponseCookie.from("jwt-token", jwt)
                        .httpOnly(true)
                        .secure(isSecure)
                        .path("/")
                        .maxAge(Duration.ofDays(1))
                        .sameSite(isSecure ? "None" : "Lax")
                        .build();

                response.addHeader(HttpHeaders.SET_COOKIE, accessTokenCookie.toString());
                log.info("üç™ JWT —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Cookie: {}", accessTokenCookie);
            }

            // ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
            String redirectUrl = "http://localhost:4200/dashboard";
            log.info("‚û° –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ {}", redirectUrl);
            response.sendRedirect(redirectUrl);
        } else {
            log.error("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: –Ω–µ OIDC –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å");
            response.sendRedirect("http://localhost:4200/login?error=authentication_failed");
        }
    }

}